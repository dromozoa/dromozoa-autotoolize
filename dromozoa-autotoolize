#! /usr/bin/env lua

local version = {}
local make_vars = {}

local function check_header(filename, result)
  io.stderr:write("checking ", filename, "\n")
  if not result then
    result = {}
  end
  for line in io.lines(filename) do
    local major, minor, release = line:match([[#define%s+LUA_RELEASE%s+"Lua%s+(%d+)%.(%d+)%.(%d+)"]])
    if major then
      result.major = tonumber(major)
      result.minor = tonumber(minor)
      result.release = tonumber(release)
      break
    end
    local key, value = line:match([[#define%s+LUA_VERSION_(%u+)%s+"(%d+)"]])
    if key then
      result[key:lower()] = tonumber(value)
      if key == "RELEASE" then
        break
      end
    end
  end
  return result
end

local function check_makefile(filename, result)
  io.stderr:write("checking ", filename, "\n")
  if not result then
    result = {}
  end
  local buffer = ""
  for line in io.lines(filename) do
    if line:find("\\$") then
      buffer = buffer .. line:sub(1, -2)
    else
      buffer = buffer .. line
      local key, value = buffer:match("^([%w_]+)%s*=%s*(.*)")
      if key then
        result[key] = value
      end
      buffer = ""
    end
  end
  return result
end

local generate_header_templates = {
-- Lua 5.1
[[
#define LUA_USE_POSIX
#define LUA_USE_DLOPEN
@LUA_USE_READLINE@
#define LUA_USE_STRTODHEX
#define LUA_USE_AFORMAT
#define LUA_USE_LONGLONG
]];
-- Lua 5.2
[[
#define LUA_COMPAT_ALL
#define LUA_USE_POSIX
#define LUA_USE_DLOPEN
@LUA_USE_READLINE@
#define LUA_USE_STRTODHEX
#define LUA_USE_AFORMAT
#define LUA_USE_LONGLONG
]];
-- Lua 5.3
[[
#define LUA_USE_POSIX
#define LUA_USE_DLOPEN
@LUA_USE_READLINE@
]];
}

local function generate_header(out, filename, version_major, version_minor)
  local state = 1
  for line in io.lines("src/luaconf.h") do
    if state == 1 then
      if line:find([[Search for "@@" to find all configurable definitions%.]]) then
        state = 2
      end
    elseif state == 2 then
      if line == "" then
        state = 3
      end
    elseif state == 3 then
      if line == "" then
        assert(version_major == 5)
        out:write(assert(generate_header_templates[version_minor]))
        state = 4
      end
    else
      line = line:gsub([[(#define%s+LUA_ROOT%s+)"[^"]+/"]], [[%1"@prefix@/"]])
    end
    out:write(line, "\n")
  end
  return out
end

local function apply_template(out, template, vars)
  out:write((template:gsub("%[%%%s*(.-)%s*%%%]", vars)))
  return out
end

local function eval(command)
  local handle = assert(io.popen(command))
  local result = handle:read("*a"):gsub("%s+$", "")
  handle:close()
  return result
end

local function exec(command)
  local result = os.execute(command)
  if type(result) == "number" then
    return result == 0
  else
    return result
  end
end

local function split_whitespace(s, result)
  if not result then
    result = {}
  end
  for item in s:gmatch("%S+") do
    result[#result + 1] = item
  end
  return result
end

local function apply_gsub(list, pattern, repl)
  for i, v in ipairs(list) do
    list[i] = v:gsub(pattern, repl)
  end
  return list
end

local version = check_header("src/lua.h")
local make_vars = {}
check_makefile("Makefile", make_vars)
check_makefile("src/Makefile", make_vars)

local vars = {}

local out = assert(io.open("src/luaconf.h.in", "w"))
generate_header(out, "src/luaconf.h", version.major, version.minor)
out:close()

local vars = {
  LUA_V = ("%d.%d"):format(version.major, version.minor);
  LUA_R = ("%d.%d.%d"):format(version.major, version.minor, version.release);
}

local files = {}
split_whitespace(make_vars.CORE_O, files)
split_whitespace(make_vars.LIB_O, files)
apply_gsub(files, "%.o$", ".c")
vars.liblua_la_SOURCES = table.concat(files, " ")

local files = {}
split_whitespace(make_vars.LUA_O, files)
apply_gsub(files, "%.o$", ".c")
vars.lua_SOURCES = table.concat(files, " ")

local files = {}
split_whitespace(make_vars.LUAC_O, files)
apply_gsub(files, "%.o$", ".c")
vars.luac_SOURCES = table.concat(files, " ")

local out = assert(io.open("src/Makefile.am", "w"))
apply_template(out, [[
lib_LTLIBRARIES = liblua.la
bin_PROGRAMS = lua luac

liblua_la_SOURCES = [% liblua_la_SOURCES %]
liblua_la_LDFLAGS = -release @LUA_R@
liblua_la_LIBADD = @LIBM@

lua_SOURCES = [% lua_SOURCES %]
lua_LDFLAGS = -export-dynamic -static
lua_LDADD = liblua.la

luac_SOURCES = [% luac_SOURCES %]
luac_LDFLAGS = -export-dynamic -static
luac_LDADD = liblua.la
]], vars)

-- io.stderr:write("fething m4/ax_lib_readline.m4\n")
-- assert(exec("mkdir -p m4"))
-- assert(exec("curl -fLs 'http://git.savannah.gnu.org/gitweb/?p=autoconf-archive.git;a=blob_plain;f=m4/ax_lib_readline.m4' >m4/ax_lib_readline.m4.new"))
-- assert(os.rename("m4/ax_lib_readline.m4.new", "m4/ax_lib_readline.m4"))
